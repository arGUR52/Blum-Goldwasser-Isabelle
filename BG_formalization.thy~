theory BG_formalization imports
  CryptHOL.CryptHOL
begin

definition key_gen :: "nat \<Rightarrow> nat \<Rightarrow> nat" where 
  "key_gen p q = p * q"

type_synonym bitstring = "bool list"



fun split :: "bitstring \<Rightarrow> nat \<Rightarrow> bitstring list" where
  "split [] n = []" |
  "split m 0 = []" |
  "split (x # xs) n = (take n (x # xs)) # (split (drop n (x # xs)) n)"

(*TODO: Find lemmas for split to prove its correctness!*)

definition encrypt :: "nat \<Rightarrow> bitstring \<Rightarrow> nat \<Rightarrow> bitstring" where
  "encrypt n m r = 
  do {
  let h = nat \<lfloor>log 2 (log 2 n)\<rfloor> in
  let m_2 = split m h in
  let x_0 = (r * r) mod n in
  m}" (* TODO: find out how to write loops *)
