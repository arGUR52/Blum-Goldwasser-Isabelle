theory BG_prob imports
  Main
  BG_aux
  BG_formalization
  BG_correctness
  "Crypto_Standards.Words"
  "CryptHOL.CryptHOL"
begin

section "Formalization of Blum-Goldwasser cryptosystem in a probabilistic setting"

type_synonym pub_key = nat
type_synonym priv_key = "nat \<times> nat"

subsection "Key generation"

text "We generate a key by uniformally sampling a set of natural numbers that are congruent to 3 
modulo 4. To ensure that \<open>p \<noteq> q\<close>, we remove the first selected number from the sample set."
definition key_gen_prob :: "nat \<Rightarrow> nat \<Rightarrow> (pub_key \<times> priv_key) spmf"
where 
  "key_gen_prob lower upper = do {
    let \<K> = {(p::nat). prime p \<and>  p mod 4 = 3 \<and> lower \<le> p \<and> p \<le> upper};
    p \<leftarrow> spmf_of_set \<K>; 
    q \<leftarrow> spmf_of_set (\<K> - {p});
    return_spmf (key_gen p q)
  }"

(*Problems:
  1. The set is infinite. Hence, spmf_of_set won't work here
    - Idea 1: Limit the set by a random number?
    - Idea 2: Find another way to sample (however, with infinite amount of keys, we cannot find a
    probability distribution with non-zero constant probabilities, which will force us to use a 
    distribution that will prioritize some values more than the others.
    - Idea 3: Since the sampling is not defined in any literature, we may write multiple key 
    generation algorithms and try to prove the desired properties with these algorithms. Then, we 
    prove the correctness/IND-CPA secureness for different sampling techniques which may also be 
    interesting (for instance: with which sampling is it not IND-CPA-secure anymore?)
  2. The probabilities change after we remove an element from the set. We may need to sample the 
  tuple from a finite set of tuples of valid private keys, or maybe show that the probability 
  distribution doesn't change in this case. Does it really change? Or does it matter that it changes?

  Idea: Use the current standard (3000 according to Technical Guidelines for 
  Federal Office for Information Security (BSI)) *)

definition encrypt_prob :: "pub_key \<Rightarrow> bitstring \<Rightarrow> (bitstring list \<times> nat) spmf" where
"encrypt_prob n m = do {
   let \<Z> = {(z::nat). z < n \<and> coprime z n};
   r \<leftarrow> spmf_of_set \<Z>;
   return_spmf (encrypt_alt n m r)
}"

definition decrypt_prob :: "priv_key \<Rightarrow> (bitstring list \<times> nat) \<Rightarrow> bitstring spmf" where
"decrypt_prob = (\<lambda>(p,q) c. return_spmf (decrypt_alt p q c))"

theorem "spmf (do {
  (n, (p, q)) \<leftarrow> key_gen_prob l u;
  (c, x) \<leftarrow> (encrypt_prob n m);
  return_spmf (decrypt_alt p q (c, x) = m)}) True = 1"
proof - 
  have "do {
  (n, (p, q)) \<leftarrow> key_gen_prob l u;
  (c, x) \<leftarrow> (encrypt_prob n m);
  return_spmf (decrypt_alt p q (c, x) = m)} = 
  do {
  (n, (p, q)) \<leftarrow> key_gen_prob l u;
  let \<Z> = {(z::nat). z < n \<and> coprime z n};
  r \<leftarrow> spmf_of_set \<Z>;
  (c, x) \<leftarrow>  return_spmf (encrypt_alt n m r);
  return_spmf (decrypt_alt p q (c, x) = m)}" 
    unfolding encrypt_prob_def 
    by auto
  also have "... = 
   do {
  (n, (p, q)) \<leftarrow> key_gen_prob l u;
  let \<Z> = {(z::nat). z < n \<and> coprime z n};
  r \<leftarrow> spmf_of_set \<Z>;
  return_spmf (decrypt_alt p q (encrypt_alt n m r) = m)}" 
    by auto
  also have "... = 
   do {
  (n, (p, q)) \<leftarrow> do {
  let \<K> = {(p::nat). prime p \<and> p mod 4 = 3 \<and> l \<le> p \<and> p \<le> u};
   p \<leftarrow> spmf_of_set \<K>; 
   q \<leftarrow> spmf_of_set (\<K> - {p});
  return_spmf (key_gen p q)
  };
  let \<Z> = {(z::nat). z < n \<and> coprime z n};
  r \<leftarrow> spmf_of_set \<Z>;
  return_spmf (decrypt_alt p q (encrypt_alt n m r) = m)}" 
    unfolding key_gen_prob_def
    by auto
  also have "... = 
   do {
  let \<K> = {(p::nat). prime p \<and> p mod 4 = 3 \<and> l \<le> p \<and> p \<le> u};
  p \<leftarrow> spmf_of_set \<K>; 
  q \<leftarrow> spmf_of_set (\<K> - {p});
  (n, (p, q)) \<leftarrow> return_spmf (key_gen p q);
  let \<Z> = {(z::nat). z < n \<and> coprime z n};
  r \<leftarrow> spmf_of_set \<Z>;
  return_spmf (decrypt_alt p q (encrypt_alt n m r) = m)}" 
    unfolding Let_def by auto 
  also have "... = 
   do {
  let \<K> = {(p::nat). prime p \<and> p mod 4 = 3 \<and> l \<le> p \<and> p \<le> u};
  p \<leftarrow> spmf_of_set \<K>; 
  q \<leftarrow> spmf_of_set (\<K> - {p});
  (n, (p, q)) \<leftarrow> return_spmf ((p * q, (p, q)));
  let \<Z> = {(z::nat). z < n \<and> coprime z n};
  r \<leftarrow> spmf_of_set \<Z>;
  return_spmf (decrypt_alt p q (encrypt_alt n m r) = m)}" 
    unfolding key_gen_def by auto
 also have "... = 
   do {
  let \<K> = {(p::nat). prime p \<and> p mod 4 = 3 \<and> l \<le> p \<and> p \<le> u};
  p \<leftarrow> spmf_of_set \<K>; 
  q \<leftarrow> spmf_of_set (\<K> - {p});
  let \<Z> = {(z::nat). z < p * q \<and> coprime z (p * q)};
  r \<leftarrow> spmf_of_set \<Z>;
  return_spmf (decrypt_alt p q (encrypt_alt (p * q) m r) = m)}" 
   by auto

  from calculation have "do {
  (n, (p, q)) \<leftarrow> key_gen_prob l u;
  (c, x) \<leftarrow> (encrypt_prob n m);
  return_spmf (decrypt_alt p q (c, x) = m)} 
  = do {
  let \<K> = {(p::nat). prime p \<and> p mod 4 = 3 \<and> l \<le> p \<and> p \<le> u};
  p \<leftarrow> spmf_of_set \<K>; 
  q \<leftarrow> spmf_of_set (\<K> - {p});
  let \<Z> = {(z::nat). z < p * q \<and> coprime z (p * q)};
  r \<leftarrow> spmf_of_set \<Z>;
  return_spmf (decrypt_alt p q (encrypt_alt (p * q) m r) = m)}" by auto


  let ?\<K> = "{(p::nat). prime p \<and> p mod 4 = 3 \<and> l \<le> p \<and> p \<le> u}"
  have "x \<in> ?\<K> \<Longrightarrow> prime x" 
    by auto
  

  have spmf: "spmf (do {p \<leftarrow> spmf_of_set ?\<K>; return_spmf p}) x = indicator ?\<K> x / card ?\<K>" 
    using spmf_of_set by auto
  have "(x \<notin> ?\<K>) = ((indicator ?\<K> x) = 0)" by auto
  then have "(x \<notin> ?\<K>) = (spmf (do {p \<leftarrow> spmf_of_set ?\<K>; return_spmf p}) x = 0)" 
    using spmf by auto
  then have x_in_k_iff: "(x \<in> ?\<K>) = (spmf (do {p \<leftarrow> spmf_of_set ?\<K>; return_spmf p}) x > 0)" 
    unfolding indicator_def by force
  then have "(spmf (do {p \<leftarrow> spmf_of_set ?\<K>; return_spmf p}) x > 0) \<Longrightarrow> prime x" by auto
  from x_in_k_iff have "(spmf (do {p \<leftarrow> spmf_of_set ?\<K>; return_spmf p}) x > 0) \<Longrightarrow> x mod 4 = 3" by auto


  have spmf: "spmf (do {q \<leftarrow> spmf_of_set (?\<K> - {p}) ; return_spmf q}) x = indicator (?\<K> - {p}) x / card (?\<K> - {p})" 
    using spmf_of_set by auto
  have "(x \<notin> (?\<K> - {p})) = ((indicator (?\<K> - {p}) x) = 0)"
    by (auto simp add: indicator_def)
  then have "(x \<notin> (?\<K> - {p})) = (spmf (do {p \<leftarrow> spmf_of_set (?\<K> - {p}); return_spmf p}) x = 0)" 
    using spmf by auto
  then have x_in_k_iff: "(x \<in> (?\<K> - {p})) = (spmf (do {p \<leftarrow> spmf_of_set (?\<K> - {p}); return_spmf p}) x > 0)" 
    unfolding indicator_def by force
  then have "(spmf (do {p \<leftarrow> spmf_of_set (?\<K> - {p}); return_spmf p}) x > 0) \<Longrightarrow> prime x" by auto
  from x_in_k_iff have "(spmf (do {p \<leftarrow> spmf_of_set (?\<K> - {p}); return_spmf p}) x > 0) \<Longrightarrow> x mod 4 = 3" by auto

  then show "?thesis" sorry
qed

end